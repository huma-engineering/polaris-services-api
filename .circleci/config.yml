SERVICE_FOLDERS_MASTER: &SERVICE_FOLDERS
  SERVICE_FOLDERS: '.'

GCP_DOCKER_AUTH_MASTER: &GCP_DOCKER_AUTH
  auth:
    username: _json_key
    password: ${GOOGLE_AUTH}

version: 2.1
orbs:
  azure-acr: circleci/azure-acr@0.1.4
  ms-teams: cloudradar-monitoring/ms-teams@0.0.1
jobs:
  test:
    docker:
      - image: cimg/python:3.9
    environment:
      <<: *SERVICE_FOLDERS
      DOCKER_BUILDKIT: 0
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Create coverage report dir
          command: mkdir -p ${COVERAGE_REPORT_DIR}
      - run:
          name: Set up tox tests
          command: pip install --upgrade tox
      - restore_cache:
          keys:
            - v1-poetry-deps-{{ checksum "poetry.lock" }}
            - v1-poetry-deps-
      - run:
          name: Set up neo4j and run tests
          command: .circleci/run_neo_tests.sh
      - save_cache:
          key: v1-poetry-deps-{{ checksum "poetry.lock" }}
          paths:
            - .tox
      - persist_to_workspace:
          root: coverage-reports
          paths:
            - coverage.xml

  integration-test:
    docker:
      - image: gcr.io/dhos-stack/circleci-build-image:latest
        <<: *GCP_DOCKER_AUTH
    environment:
      <<: *SERVICE_FOLDERS
      REPORT_PORTAL_PROJECT: platform
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - run:
          name: Auth with ACR
          command: source /usr/local/bin/deployment-helpers-v1.sh; authenticateToACR
      - run:
          name: Run the integration test script
          command: .circleci/run_integration_tests.sh
  deploy-dev:
    docker:
      - image: gcr.io/dhos-stack/circleci-build-image:latest
        <<: *GCP_DOCKER_AUTH
    environment:
      K8S_DEV_DEPLOYMENT_NAME: deployment/dhos-services-api-dep
      ACR_REPO_BASE: dhos
      AZURE_APIMGMT_PRODUCT_ID: polaris
      AZURE_APIMGMT_API_PATH: dhos-services
      AZURE_APIMGMT_OPENAPI_YAML_PATH: dhos_services_api/openapi/openapi.yaml
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Add build information
          command: .circleci/record_build_info.sh
      - run:
          name: Build image
          command: docker build -t ${CIRCLE_PROJECT_REPONAME} . --build-arg GEMFURY_DOWNLOAD_KEY
      - run:
          name: Push image to GCR
          command: .circleci/push_gcr.sh
      - azure-acr/build-and-push-image:
          checkout: false
          login-server-name: ${AZURE_LOGIN_SERVER_NAME}
          registry-name: ${AZURE_REGISTRY_NAME}
          repo: ${ACR_REPO_BASE}/dhos-services-api
          tag: dev,cb-${CIRCLE_BUILD_NUM},$(git log --pretty=format:'%h' -n 1)
          extra-build-args: --build-arg GEMFURY_DOWNLOAD_KEY
      - run:
          name: Deploy API Spec to Azure API Management service
          command: pip install requests pyyaml; python /usr/local/scripts/deploy_api_spec.py
      - run:
          name: Deploy to Azure dev environment
          command: .circleci/deploy_azure_dev.sh
      - ms-teams/report:
          only_on_fail: true
          webhook_url: ${MSTEAMS_NOTIFY_WEBHOOK_URL}
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - test:
          context: engineering-build
      - integration-test:
          context: engineering-build
      - deploy-dev:
          context: dhos-deploy
          requires:
            - test
            - integration-test
          filters:
            branches:
              only:
                - develop
